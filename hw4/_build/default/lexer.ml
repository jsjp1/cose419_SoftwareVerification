# 1 "lexer.mll"
 
  open Parser
    
  exception LexingError of string

  let comment_depth = Stdlib.ref 0

  let kwd_map : (string, Parser.token) Core.Map.Poly.t
  = let module PMap = Core.Map.Poly in
    [
      ("true",        BOOLEAN true);
      ("false",       BOOLEAN false);
      ("pre",         PRE);
      ("post",        POST);
      ("forall",      FORALL);
      ("exists",      EXISTS);
      ("int",         INT);
      ("bool",        BOOL);
      ("if",          IF);
      ("else",        ELSE);
      ("for",         FOR);
      ("while",       WHILE);
      ("do",          DO);
      ("return",      RETURN);
      ("break",       BREAK);
      ("skip",        SKIP);
      ("sorted",      SORTED);
      ("partitioned", PARTITIONED);
      ("call",        CALL); 
      ]
    |> PMap.of_alist
    |> (function |`Ok m -> m |`Duplicate_key _ -> LexingError (": wrong keyword table settings") |> Stdlib.raise)
  
  let id_or_kwd : string -> Parser.token
  = let open Core in
    fun s -> begin
    (* id_or_kwd function start *)
    let token = Map.find kwd_map s in
    match token with
    | Some t  -> t
    | None    -> IDENT s
    (* id_or_kwd function end *)
  end

# 47 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\218\255\219\255\222\255\224\255\002\000\031\000\033\000\
    \001\000\082\000\033\000\236\255\004\000\238\255\239\255\035\000\
    \241\255\242\255\243\255\244\255\245\255\246\255\247\255\248\255\
    \249\255\081\000\096\000\252\255\002\000\005\000\112\000\254\255\
    \255\255\220\255\232\255\235\255\231\255\077\000\234\255\233\255\
    \230\255\227\255\226\255\113\000\252\255\253\255\093\000\099\000\
    \255\255\254\255\006\000\253\255\254\255\007\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\030\000\037\000\027\000\
    \037\000\026\000\032\000\255\255\018\000\255\255\255\255\015\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\005\000\004\000\255\255\002\000\002\000\034\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\003\000\003\000\
    \255\255\255\255\255\255\255\255\255\255\002\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\044\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\051\000\000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\029\000\027\000\029\000\027\000\028\000\029\000\029\000\
    \054\000\054\000\029\000\053\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \029\000\005\000\029\000\017\000\000\000\029\000\008\000\039\000\
    \024\000\023\000\003\000\004\000\014\000\010\000\013\000\030\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\015\000\016\000\009\000\006\000\007\000\042\000\
    \018\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\020\000\041\000\019\000\040\000\035\000\
    \033\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\022\000\012\000\021\000\011\000\037\000\
    \034\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\038\000\049\000\048\000\000\000\036\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\031\000\046\000\000\000\000\000\000\000\032\000\
    \047\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\000\000\000\000\000\000\000\000\026\000\
    \000\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\045\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\028\000\028\000\000\000\029\000\028\000\
    \050\000\053\000\029\000\050\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\028\000\000\000\255\255\029\000\000\000\008\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\006\000\000\000\007\000\010\000\
    \015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
    \012\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\037\000\046\000\047\000\255\255\009\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\030\000\043\000\255\255\255\255\255\255\030\000\
    \043\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\255\255\255\255\255\255\255\255\026\000\
    \255\255\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\050\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\043\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec next_token lexbuf =
   __ocaml_lex_next_token_rec lexbuf 0
and __ocaml_lex_next_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 59 "lexer.mll"
                          ( comment_line lexbuf )
# 190 "lexer.ml"

  | 1 ->
# 60 "lexer.mll"
                          ( comment_depth := 1; comment_block lexbuf )
# 195 "lexer.ml"

  | 2 ->
# 61 "lexer.mll"
                          ( next_token lexbuf )
# 200 "lexer.ml"

  | 3 ->
# 62 "lexer.mll"
                          ( Lexing.new_line lexbuf; next_token lexbuf )
# 205 "lexer.ml"

  | 4 ->
let
# 63 "lexer.mll"
             s
# 211 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 63 "lexer.mll"
                          ( id_or_kwd s )
# 215 "lexer.ml"

  | 5 ->
let
# 64 "lexer.mll"
              n
# 221 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 64 "lexer.mll"
                          ( NUMBER (int_of_string n) )
# 225 "lexer.ml"

  | 6 ->
# 65 "lexer.mll"
                          ( LPAREN )
# 230 "lexer.ml"

  | 7 ->
# 66 "lexer.mll"
                          ( RPAREN )
# 235 "lexer.ml"

  | 8 ->
# 67 "lexer.mll"
                          ( LBRACE )
# 240 "lexer.ml"

  | 9 ->
# 68 "lexer.mll"
                          ( RBRACE )
# 245 "lexer.ml"

  | 10 ->
# 69 "lexer.mll"
                          ( LBRACK )
# 250 "lexer.ml"

  | 11 ->
# 70 "lexer.mll"
                          ( RBRACK )
# 255 "lexer.ml"

  | 12 ->
# 71 "lexer.mll"
                          ( ASSERT )
# 260 "lexer.ml"

  | 13 ->
# 72 "lexer.mll"
                          ( HASH )
# 265 "lexer.ml"

  | 14 ->
# 73 "lexer.mll"
                          ( SEMICOLON )
# 270 "lexer.ml"

  | 15 ->
# 74 "lexer.mll"
                          ( COLON )
# 275 "lexer.ml"

  | 16 ->
# 75 "lexer.mll"
                          ( COMMA )
# 280 "lexer.ml"

  | 17 ->
# 76 "lexer.mll"
                          ( DOT )
# 285 "lexer.ml"

  | 18 ->
# 77 "lexer.mll"
                          ( MID )
# 290 "lexer.ml"

  | 19 ->
# 78 "lexer.mll"
                          ( FNOT )
# 295 "lexer.ml"

  | 20 ->
# 79 "lexer.mll"
                          ( IMPLY )
# 300 "lexer.ml"

  | 21 ->
# 80 "lexer.mll"
                          ( IFF )
# 305 "lexer.ml"

  | 22 ->
# 81 "lexer.mll"
                          ( AND )
# 310 "lexer.ml"

  | 23 ->
# 82 "lexer.mll"
                          ( OR )
# 315 "lexer.ml"

  | 24 ->
# 83 "lexer.mll"
                          ( LE )
# 320 "lexer.ml"

  | 25 ->
# 84 "lexer.mll"
                          ( GE )
# 325 "lexer.ml"

  | 26 ->
# 85 "lexer.mll"
                          ( LT )
# 330 "lexer.ml"

  | 27 ->
# 86 "lexer.mll"
                          ( GT )
# 335 "lexer.ml"

  | 28 ->
# 87 "lexer.mll"
                          ( EQ )
# 340 "lexer.ml"

  | 29 ->
# 88 "lexer.mll"
                          ( NEQ )
# 345 "lexer.ml"

  | 30 ->
# 89 "lexer.mll"
                          ( ENOT )
# 350 "lexer.ml"

  | 31 ->
# 90 "lexer.mll"
                          ( PLUS )
# 355 "lexer.ml"

  | 32 ->
# 91 "lexer.mll"
                          ( MINUS )
# 360 "lexer.ml"

  | 33 ->
# 92 "lexer.mll"
                          ( STAR )
# 365 "lexer.ml"

  | 34 ->
# 93 "lexer.mll"
                          ( SLASH )
# 370 "lexer.ml"

  | 35 ->
# 94 "lexer.mll"
                          ( ASSIGN )
# 375 "lexer.ml"

  | 36 ->
# 95 "lexer.mll"
                          ( EOF )
# 380 "lexer.ml"

  | 37 ->
let
# 96 "lexer.mll"
         c
# 386 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 96 "lexer.mll"
                          ( LexingError (": illegal character \'" ^ (c |> String.make 1) ^ "\'") |> Stdlib.raise )
# 390 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_next_token_rec lexbuf __ocaml_lex_state

and comment_block lexbuf =
   __ocaml_lex_comment_block_rec lexbuf 43
and __ocaml_lex_comment_block_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 99 "lexer.mll"
                          ( Stdlib.incr comment_depth; comment_block lexbuf )
# 402 "lexer.ml"

  | 1 ->
# 100 "lexer.mll"
                          ( Stdlib.decr comment_depth; if !comment_depth > 0 then comment_block lexbuf else next_token lexbuf )
# 407 "lexer.ml"

  | 2 ->
# 101 "lexer.mll"
                          ( LexingError (": illegal comment") |> Stdlib.raise )
# 412 "lexer.ml"

  | 3 ->
# 102 "lexer.mll"
                          ( comment_block lexbuf )
# 417 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_block_rec lexbuf __ocaml_lex_state

and comment_line lexbuf =
   __ocaml_lex_comment_line_rec lexbuf 50
and __ocaml_lex_comment_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 105 "lexer.mll"
                          ( Lexing.new_line lexbuf; next_token lexbuf )
# 429 "lexer.ml"

  | 1 ->
# 106 "lexer.mll"
                          ( EOF )
# 434 "lexer.ml"

  | 2 ->
# 107 "lexer.mll"
                          ( comment_line lexbuf )
# 439 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_line_rec lexbuf __ocaml_lex_state

;;

