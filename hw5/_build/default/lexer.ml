# 1 "lexer.mll"
 
  open Parser
    
  exception LexingError of string

  let comment_depth = Stdlib.ref 0

  let kwd_map : (string, Parser.token) Core.Map.Poly.t
  = let module PMap = Core.Map.Poly in
    [
      ("true",        TRUE);
      ("false",       FALSE);
      ("if",          IF);
      ("else",        ELSE);
      ("while",       WHILE);
      ("var",         VAR);
      ("assert",      ASSERT); 
      ]
    |> PMap.of_alist
    |> (function |`Ok m -> m |`Duplicate_key _ -> LexingError (": wrong keyword table settings") |> Stdlib.raise)
  
  let id_or_kwd : string -> Parser.token
  = let open Core in
    fun s -> begin
    (* id_or_kwd function start *)
    let token = Map.find kwd_map s in
    match token with
    | Some t  -> t
    | None    -> IDENT s
    (* id_or_kwd function end *)
  end

# 35 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\234\255\235\255\001\000\237\255\238\255\239\255\240\255\
    \002\000\003\000\001\000\244\255\245\255\246\255\247\255\248\255\
    \249\255\078\000\088\000\252\255\002\000\005\000\049\000\254\255\
    \255\255\243\255\242\255\241\255\236\255\104\000\252\255\253\255\
    \045\000\004\000\255\255\254\255\006\000\253\255\254\255\007\000\
    \255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\021\000\255\255\255\255\255\255\255\255\
    \021\000\021\000\021\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\005\000\004\000\255\255\002\000\002\000\021\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \003\000\003\000\255\255\255\255\255\255\255\255\255\255\002\000\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\030\000\000\000\000\000\
    \255\255\255\255\000\000\000\000\037\000\000\000\000\000\255\255\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\019\000\021\000\019\000\020\000\021\000\021\000\
    \040\000\040\000\021\000\039\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\007\000\021\000\000\000\000\000\021\000\010\000\025\000\
    \016\000\015\000\004\000\006\000\011\000\005\000\034\000\022\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\003\000\012\000\009\000\008\000\028\000\027\000\
    \026\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\023\000\035\000\000\000\000\000\000\000\
    \024\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\014\000\000\000\013\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\032\000\000\000\000\000\000\000\000\000\033\000\
    \000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\000\000\000\000\000\000\000\000\018\000\
    \000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\038\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \031\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\020\000\020\000\000\000\021\000\020\000\
    \036\000\039\000\021\000\036\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\020\000\255\255\255\255\021\000\000\000\010\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\033\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\008\000\
    \009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\022\000\032\000\255\255\255\255\255\255\
    \022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\029\000\255\255\255\255\255\255\255\255\029\000\
    \255\255\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\255\255\255\255\255\255\255\255\018\000\
    \255\255\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\036\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \029\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec next_token lexbuf =
   __ocaml_lex_next_token_rec lexbuf 0
and __ocaml_lex_next_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 47 "lexer.mll"
                          ( comment_line lexbuf )
# 173 "lexer.ml"

  | 1 ->
# 48 "lexer.mll"
                          ( comment_depth := 1; comment_block lexbuf )
# 178 "lexer.ml"

  | 2 ->
# 49 "lexer.mll"
                          ( next_token lexbuf )
# 183 "lexer.ml"

  | 3 ->
# 50 "lexer.mll"
                          ( Lexing.new_line lexbuf; next_token lexbuf )
# 188 "lexer.ml"

  | 4 ->
let
# 51 "lexer.mll"
             s
# 194 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 51 "lexer.mll"
                          ( id_or_kwd s )
# 198 "lexer.ml"

  | 5 ->
let
# 52 "lexer.mll"
              n
# 204 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 52 "lexer.mll"
                          ( NUMBER (int_of_string n) )
# 208 "lexer.ml"

  | 6 ->
# 53 "lexer.mll"
                          ( LPAREN )
# 213 "lexer.ml"

  | 7 ->
# 54 "lexer.mll"
                          ( RPAREN )
# 218 "lexer.ml"

  | 8 ->
# 55 "lexer.mll"
                          ( LBRACE )
# 223 "lexer.ml"

  | 9 ->
# 56 "lexer.mll"
                          ( RBRACE )
# 228 "lexer.ml"

  | 10 ->
# 57 "lexer.mll"
                          ( SEMICOLON )
# 233 "lexer.ml"

  | 11 ->
# 58 "lexer.mll"
                          ( COMMA )
# 238 "lexer.ml"

  | 12 ->
# 59 "lexer.mll"
                          ( AND )
# 243 "lexer.ml"

  | 13 ->
# 60 "lexer.mll"
                          ( LE )
# 248 "lexer.ml"

  | 14 ->
# 61 "lexer.mll"
                          ( EQ )
# 253 "lexer.ml"

  | 15 ->
# 62 "lexer.mll"
                          ( ENOT )
# 258 "lexer.ml"

  | 16 ->
# 63 "lexer.mll"
                          ( PLUS )
# 263 "lexer.ml"

  | 17 ->
# 64 "lexer.mll"
                          ( MINUS )
# 268 "lexer.ml"

  | 18 ->
# 65 "lexer.mll"
                          ( STAR )
# 273 "lexer.ml"

  | 19 ->
# 66 "lexer.mll"
                          ( ASSIGN )
# 278 "lexer.ml"

  | 20 ->
# 67 "lexer.mll"
                          ( EOF )
# 283 "lexer.ml"

  | 21 ->
let
# 68 "lexer.mll"
         c
# 289 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 68 "lexer.mll"
                          ( LexingError (": illegal character \'" ^ (c |> String.make 1) ^ "\'") |> Stdlib.raise )
# 293 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_next_token_rec lexbuf __ocaml_lex_state

and comment_block lexbuf =
   __ocaml_lex_comment_block_rec lexbuf 29
and __ocaml_lex_comment_block_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 71 "lexer.mll"
                          ( Stdlib.incr comment_depth; comment_block lexbuf )
# 305 "lexer.ml"

  | 1 ->
# 72 "lexer.mll"
                          ( Stdlib.decr comment_depth; if !comment_depth > 0 then comment_block lexbuf else next_token lexbuf )
# 310 "lexer.ml"

  | 2 ->
# 73 "lexer.mll"
                          ( LexingError (": illegal comment") |> Stdlib.raise )
# 315 "lexer.ml"

  | 3 ->
# 74 "lexer.mll"
                          ( comment_block lexbuf )
# 320 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_block_rec lexbuf __ocaml_lex_state

and comment_line lexbuf =
   __ocaml_lex_comment_line_rec lexbuf 36
and __ocaml_lex_comment_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 77 "lexer.mll"
                          ( Lexing.new_line lexbuf; next_token lexbuf )
# 332 "lexer.ml"

  | 1 ->
# 78 "lexer.mll"
                          ( EOF )
# 337 "lexer.ml"

  | 2 ->
# 79 "lexer.mll"
                          ( comment_line lexbuf )
# 342 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_line_rec lexbuf __ocaml_lex_state

;;

